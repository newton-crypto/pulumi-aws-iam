// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsIam
{
    [AwsIamResourceType("aws-iam:index:Role")]
    public partial class Role : Pulumi.ComponentResource
    {
        /// <summary>
        /// Create a Role resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Role(string name, RoleArgs args, ComponentResourceOptions? options = null)
            : base("aws-iam:index:Role", name, args ?? new RoleArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class RoleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy that grants an entity permission to assume the role.
        /// </summary>
        [Input("assume_role_policy")]
        public Input<string>? Assume_role_policy { get; set; }

        /// <summary>
        /// Environment used for role path.
        /// </summary>
        [Input("env")]
        public Input<string>? Env { get; set; }

        [Input("managed_policy_arns")]
        private InputList<Inputs.PolicyStatementArgs>? _managed_policy_arns;

        /// <summary>
        /// ARNs of IAM managed policies.
        /// </summary>
        public InputList<Inputs.PolicyStatementArgs> Managed_policy_arns
        {
            get => _managed_policy_arns ?? (_managed_policy_arns = new InputList<Inputs.PolicyStatementArgs>());
            set => _managed_policy_arns = value;
        }

        /// <summary>
        /// Maximum session duration (in seconds) that you want to set for the specified role.
        /// </summary>
        [Input("max_session_duration")]
        public Input<int>? Max_session_duration { get; set; }

        /// <summary>
        /// Name of Role or Policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("name_is_prefix")]
        public Input<bool>? Name_is_prefix { get; set; }

        /// <summary>
        /// Policy statements for access.
        /// </summary>
        [Input("policy_statements")]
        public Input<string>? Policy_statements { get; set; }

        public RoleArgs()
        {
        }
    }
}

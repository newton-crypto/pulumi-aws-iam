// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PolicyStatement struct {
	Actions    []string `pulumi:"actions"`
	Conditions *string  `pulumi:"conditions"`
	Effect     *string  `pulumi:"effect"`
	Resources  []string `pulumi:"resources"`
	Sid        *string  `pulumi:"sid"`
}

// PolicyStatementInput is an input type that accepts PolicyStatementArgs and PolicyStatementOutput values.
// You can construct a concrete instance of `PolicyStatementInput` via:
//
//	PolicyStatementArgs{...}
type PolicyStatementInput interface {
	pulumi.Input

	ToPolicyStatementOutput() PolicyStatementOutput
	ToPolicyStatementOutputWithContext(context.Context) PolicyStatementOutput
}

type PolicyStatementArgs struct {
	Actions    pulumi.StringArrayInput `pulumi:"actions"`
	Conditions pulumi.StringPtrInput   `pulumi:"conditions"`
	Effect     pulumi.StringPtrInput   `pulumi:"effect"`
	Resources  pulumi.StringArrayInput `pulumi:"resources"`
	Sid        pulumi.StringPtrInput   `pulumi:"sid"`
}

func (PolicyStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyStatement)(nil)).Elem()
}

func (i PolicyStatementArgs) ToPolicyStatementOutput() PolicyStatementOutput {
	return i.ToPolicyStatementOutputWithContext(context.Background())
}

func (i PolicyStatementArgs) ToPolicyStatementOutputWithContext(ctx context.Context) PolicyStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStatementOutput)
}

// PolicyStatementArrayInput is an input type that accepts PolicyStatementArray and PolicyStatementArrayOutput values.
// You can construct a concrete instance of `PolicyStatementArrayInput` via:
//
//	PolicyStatementArray{ PolicyStatementArgs{...} }
type PolicyStatementArrayInput interface {
	pulumi.Input

	ToPolicyStatementArrayOutput() PolicyStatementArrayOutput
	ToPolicyStatementArrayOutputWithContext(context.Context) PolicyStatementArrayOutput
}

type PolicyStatementArray []PolicyStatementInput

func (PolicyStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyStatement)(nil)).Elem()
}

func (i PolicyStatementArray) ToPolicyStatementArrayOutput() PolicyStatementArrayOutput {
	return i.ToPolicyStatementArrayOutputWithContext(context.Background())
}

func (i PolicyStatementArray) ToPolicyStatementArrayOutputWithContext(ctx context.Context) PolicyStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStatementArrayOutput)
}

type PolicyStatementOutput struct{ *pulumi.OutputState }

func (PolicyStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyStatement)(nil)).Elem()
}

func (o PolicyStatementOutput) ToPolicyStatementOutput() PolicyStatementOutput {
	return o
}

func (o PolicyStatementOutput) ToPolicyStatementOutputWithContext(ctx context.Context) PolicyStatementOutput {
	return o
}

func (o PolicyStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

func (o PolicyStatementOutput) Conditions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyStatement) *string { return v.Conditions }).(pulumi.StringPtrOutput)
}

func (o PolicyStatementOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyStatement) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

func (o PolicyStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

func (o PolicyStatementOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyStatement) *string { return v.Sid }).(pulumi.StringPtrOutput)
}

type PolicyStatementArrayOutput struct{ *pulumi.OutputState }

func (PolicyStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyStatement)(nil)).Elem()
}

func (o PolicyStatementArrayOutput) ToPolicyStatementArrayOutput() PolicyStatementArrayOutput {
	return o
}

func (o PolicyStatementArrayOutput) ToPolicyStatementArrayOutputWithContext(ctx context.Context) PolicyStatementArrayOutput {
	return o
}

func (o PolicyStatementArrayOutput) Index(i pulumi.IntInput) PolicyStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyStatement {
		return vs[0].([]PolicyStatement)[vs[1].(int)]
	}).(PolicyStatementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStatementInput)(nil)).Elem(), PolicyStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStatementArrayInput)(nil)).Elem(), PolicyStatementArray{})
	pulumi.RegisterOutputType(PolicyStatementOutput{})
	pulumi.RegisterOutputType(PolicyStatementArrayOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 policy_statements: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[str] name: Name of Role or Policy.
        :param pulumi.Input[str] description: Description of Policy.
        :param pulumi.Input[str] name_suffix: Optional suffix for Policy.
        :param pulumi.Input[str] policy_statements: Policy statements for access.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if policy_statements is not None:
            pulumi.set(__self__, "policy_statements", policy_statements)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of Role or Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of Policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Optional suffix for Policy.
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def policy_statements(self) -> Optional[pulumi.Input[str]]:
        """
        Policy statements for access.
        """
        return pulumi.get(self, "policy_statements")

    @policy_statements.setter
    def policy_statements(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_statements", value)


class Policy(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 policy_statements: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Policy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of Policy.
        :param pulumi.Input[str] name: Name of Role or Policy.
        :param pulumi.Input[str] name_suffix: Optional suffix for Policy.
        :param pulumi.Input[str] policy_statements: Policy statements for access.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Policy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 policy_statements: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            __props__.__dict__["description"] = description
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["name_suffix"] = name_suffix
            __props__.__dict__["policy_statements"] = policy_statements
        super(Policy, __self__).__init__(
            'aws-iam:index:Policy',
            resource_name,
            __props__,
            opts,
            remote=True)


# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['RoleArgs', 'Role']

@pulumi.input_type
class RoleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 assume_role_policy: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[str]] = None,
                 managed_policy_arns: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyStatementArgs']]]] = None,
                 max_session_duration: Optional[pulumi.Input[int]] = None,
                 name_is_prefix: Optional[pulumi.Input[bool]] = None,
                 policy_statements: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Role resource.
        :param pulumi.Input[str] name: Name of Role or Policy.
        :param pulumi.Input[str] assume_role_policy: Policy that grants an entity permission to assume the role.
        :param pulumi.Input[str] env: Environment used for role path.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyStatementArgs']]] managed_policy_arns: ARNs of IAM managed policies.
        :param pulumi.Input[int] max_session_duration: Maximum session duration (in seconds) that you want to set for the specified role.
        :param pulumi.Input[str] policy_statements: Policy statements for access.
        """
        pulumi.set(__self__, "name", name)
        if assume_role_policy is not None:
            pulumi.set(__self__, "assume_role_policy", assume_role_policy)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if managed_policy_arns is not None:
            pulumi.set(__self__, "managed_policy_arns", managed_policy_arns)
        if max_session_duration is not None:
            pulumi.set(__self__, "max_session_duration", max_session_duration)
        if name_is_prefix is not None:
            pulumi.set(__self__, "name_is_prefix", name_is_prefix)
        if policy_statements is not None:
            pulumi.set(__self__, "policy_statements", policy_statements)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of Role or Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def assume_role_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policy that grants an entity permission to assume the role.
        """
        return pulumi.get(self, "assume_role_policy")

    @assume_role_policy.setter
    def assume_role_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_policy", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[str]]:
        """
        Environment used for role path.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def managed_policy_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyStatementArgs']]]]:
        """
        ARNs of IAM managed policies.
        """
        return pulumi.get(self, "managed_policy_arns")

    @managed_policy_arns.setter
    def managed_policy_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyStatementArgs']]]]):
        pulumi.set(self, "managed_policy_arns", value)

    @property
    @pulumi.getter
    def max_session_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum session duration (in seconds) that you want to set for the specified role.
        """
        return pulumi.get(self, "max_session_duration")

    @max_session_duration.setter
    def max_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_session_duration", value)

    @property
    @pulumi.getter
    def name_is_prefix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "name_is_prefix")

    @name_is_prefix.setter
    def name_is_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "name_is_prefix", value)

    @property
    @pulumi.getter
    def policy_statements(self) -> Optional[pulumi.Input[str]]:
        """
        Policy statements for access.
        """
        return pulumi.get(self, "policy_statements")

    @policy_statements.setter
    def policy_statements(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_statements", value)


class Role(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assume_role_policy: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[str]] = None,
                 managed_policy_arns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyStatementArgs']]]]] = None,
                 max_session_duration: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_is_prefix: Optional[pulumi.Input[bool]] = None,
                 policy_statements: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Role resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assume_role_policy: Policy that grants an entity permission to assume the role.
        :param pulumi.Input[str] env: Environment used for role path.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyStatementArgs']]]] managed_policy_arns: ARNs of IAM managed policies.
        :param pulumi.Input[int] max_session_duration: Maximum session duration (in seconds) that you want to set for the specified role.
        :param pulumi.Input[str] name: Name of Role or Policy.
        :param pulumi.Input[str] policy_statements: Policy statements for access.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Role resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assume_role_policy: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[str]] = None,
                 managed_policy_arns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyStatementArgs']]]]] = None,
                 max_session_duration: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_is_prefix: Optional[pulumi.Input[bool]] = None,
                 policy_statements: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoleArgs.__new__(RoleArgs)

            __props__.__dict__["assume_role_policy"] = assume_role_policy
            __props__.__dict__["env"] = env
            __props__.__dict__["managed_policy_arns"] = managed_policy_arns
            __props__.__dict__["max_session_duration"] = max_session_duration
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["name_is_prefix"] = name_is_prefix
            __props__.__dict__["policy_statements"] = policy_statements
        super(Role, __self__).__init__(
            'aws-iam:index:Role',
            resource_name,
            __props__,
            opts,
            remote=True)

